#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import select
from socket import *
import sfml as sf
from net import *
from window import *
from map import *
from evoly import *
from perso import *

time = 0

def     initConnexion(net):
    try:
        net._sock = socket(AF_INET, SOCK_STREAM)
        ip_addr = gethostbyname(net._host)
        net._sock.connect((ip_addr, net._port))
    except socket:
        print "Pas de connexion au serveur"
        exit()
    return net

def	check_args(net):
    if (len(sys.argv) == 5 or len(sys.argv) == 7):
	i = 1
        while i < len(sys.argv):
            if sys.argv[i] == "-n":
                net._team = int(sys.argv[i + 1])
            elif sys.argv[i] == "-h":
                net._host = sys.argv[i + 1]
	    elif sys.argv[i] == "-p":
                net._port = int(sys.argv[i + 1])
            i = i + 2
    else:
	print "USAGE: ./Client [-h hote] [-n equipe] [-p port]"
	exit()
    return net

def reception(net): 
    data = ""
    while (data == ""):
        inputready, outputready,exceptrdy = select.select([0, net._sock], [],[])
        for i in inputready:
            if i == net._sock:
                data += net._sock.recv(4096)
    return data

def	main():
    try:
        net = Net()
	net = check_args(net)
        net = initConnexion(net)
        print "Nom d'equipe: " + str(net._team)
	print "Hote: " + net._host
	print "Port: " + str(net._port)
        # recuperation bienvenue
        net._sock.send("GRAPHIC\n")
        # demande de l'unite de temps au serveur
       # askForTimeUnit(net)
        #recuperation taille de la map
#        data = net._sock.recv(4096)
 #       data += net._sock.recv(4096)
        data = reception(net)
        data += reception(net)
#        print data
        req = data.split("\n")
        if req[0] == "BIENVENUE":
            print "Bienvenue"
        net.recup_sizeMap(req[1])
        global time
        time = int(net.askForTimeUnit(req[2]))
        print str(time)
        #w = Windows(net._tailleX, net._tailleY)
        s = net.recup_mapContent(3, (int(net._tailleX) * int(net._tailleY)) + 3, req)
        print s
#        recup_mapContent(net)
        
        net._sock.close()
    except IOError: exit(1)

main()
